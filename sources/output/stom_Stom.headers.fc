;;
;; Header files for Stom
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_pow
int __tact_pow(int base, int exp) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $TokenTransferInternal$_store
builder $TokenTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $TokenTransferInternal$_store_cell
cell $TokenTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $TokenBurnNotification$_load
(slice, ((int, int, slice, slice))) $TokenBurnNotification$_load(slice sc_0) inline;

;; $TokenExcesses$_store
builder $TokenExcesses$_store(builder build_0, (int) v) inline;

;; $TokenExcesses$_store_cell
cell $TokenExcesses$_store_cell((int) v) inline;

;; $TokenUpdateContent$_load
(slice, ((cell))) $TokenUpdateContent$_load(slice sc_0) inline;

;; $ClaimUserReward$_store
builder $ClaimUserReward$_store(builder build_0, (int, int) v) inline;

;; $ClaimUserReward$_store_cell
cell $ClaimUserReward$_store_cell((int, int) v) inline;

;; $ClaimAndLock$_load
(slice, ((int))) $ClaimAndLock$_load(slice sc_0) inline;

;; $ClaimAndLockUser$_store
builder $ClaimAndLockUser$_store(builder build_0, (int, int, int) v) inline;

;; $ClaimAndLockUser$_store_cell
cell $ClaimAndLockUser$_store_cell((int, int, int) v) inline;

;; $ClaimNotification$_load
(slice, ((slice, int))) $ClaimNotification$_load(slice sc_0) inline;

;; $LockNotification$_load
(slice, ((slice, int))) $LockNotification$_load(slice sc_0) inline;

;; $VoteNotification$_load
(slice, ((int, int, int))) $VoteNotification$_load(slice sc_0) inline;

;; $MaxRates$_load
(slice, ((int, int))) $MaxRates$_load(slice sc_0) inline;

;; $Mint$_load
(slice, ((int, slice))) $Mint$_load(slice sc_0) inline;

;; $Stom$_store
builder $Stom$_store(builder build_0, (int, slice, cell, int, int, int, int, int, int, int) v) inline;

;; $Stom$_load
(slice, ((int, slice, cell, int, int, int, int, int, int, int))) $Stom$_load(slice sc_0) inline;

;; $StateInit$_get_code
_ $StateInit$_get_code((cell, cell) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $JettonData$_to_external
(int, int, slice, cell, cell) $JettonData$_to_external(((int, int, slice, cell, cell)) v) inline;

;; $Stom$init$_load
(slice, ((slice, cell, int))) $Stom$init$_load(slice sc_0) inline;

;; $JettonDefaultWallet$init$_store
builder $JettonDefaultWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $Stom$_contract_init
(int, slice, cell, int, int, int, int, int, int, int) $Stom$_contract_init(slice $owner, cell $content, int $max_supply) impure inline_ref;

;; $Stom$_contract_load
(int, slice, cell, int, int, int, int, int, int, int) $Stom$_contract_load() impure inline_ref;

;; $Stom$_contract_store
() $Stom$_contract_store((int, slice, cell, int, int, int, int, int, int, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $Stom$_fun_reward_rate
((int, slice, cell, int, int, int, int, int, int, int), int) $Stom$_fun_reward_rate((int, slice, cell, int, int, int, int, int, int, int) $self, int $locked_amount) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Stom$_fun_forward
((int, slice, cell, int, int, int, int, int, int, int), ()) $Stom$_fun_forward((int, slice, cell, int, int, int, int, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Stom$_fun_reply
((int, slice, cell, int, int, int, int, int, int, int), ()) $Stom$_fun_reply((int, slice, cell, int, int, int, int, int, int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice $to, int $value, int $bounce, int $mode, cell $body, cell $code, cell $data) inline;

;; $TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload
((int, int, slice, slice, int, slice)) $TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $from, slice $response_destination, int $forward_ton_amount, slice $forward_payload) inline;

;; $JettonDefaultWallet$_init_child
(cell, cell) $JettonDefaultWallet$_init_child(cell sys', slice $owner, slice $master) inline_ref;

;; $Stom$_fun_getJettonWalletInit
((int, slice, cell, int, int, int, int, int, int, int), (cell, cell)) $Stom$_fun_getJettonWalletInit((int, slice, cell, int, int, int, int, int, int, int) $self, slice $address) impure inline_ref;

;; $Stom$_fun_mint
((int, slice, cell, int, int, int, int, int, int, int), ()) $Stom$_fun_mint((int, slice, cell, int, int, int, int, int, int, int) $self, slice $to, int $amount, slice $response_destination) impure inline_ref;

;; $Stom$_fun_requireSenderAsWalletOwner
((int, slice, cell, int, int, int, int, int, int, int), ()) $Stom$_fun_requireSenderAsWalletOwner((int, slice, cell, int, int, int, int, int, int, int) $self, slice $owner) impure inline_ref;

;; $JettonData$_constructor_total_supply_mintable_owner_content_wallet_code
((int, int, slice, cell, cell)) $JettonData$_constructor_total_supply_mintable_owner_content_wallet_code(int $total_supply, int $mintable, slice $owner, cell $content, cell $wallet_code) inline;

;; $Stom$_fun_get_jetton_data
((int, slice, cell, int, int, int, int, int, int, int), (int, int, slice, cell, cell)) $Stom$_fun_get_jetton_data((int, slice, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Stom$_fun_get_wallet_address
((int, slice, cell, int, int, int, int, int, int, int), slice) $Stom$_fun_get_wallet_address((int, slice, cell, int, int, int, int, int, int, int) $self, slice $owner) impure inline_ref;

;; $Stom$_fun_requireOwner
((int, slice, cell, int, int, int, int, int, int, int), ()) $Stom$_fun_requireOwner((int, slice, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Stom$_fun_owner
((int, slice, cell, int, int, int, int, int, int, int), slice) $Stom$_fun_owner((int, slice, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $ClaimUserReward$_constructor_base_rate_growth_rate
((int, int)) $ClaimUserReward$_constructor_base_rate_growth_rate(int $base_rate, int $growth_rate) inline;

;; $ClaimAndLockUser$_constructor_amount_base_rate_growth_rate
((int, int, int)) $ClaimAndLockUser$_constructor_amount_base_rate_growth_rate(int $amount, int $base_rate, int $growth_rate) inline;

;; $TokenExcesses$_constructor_query_id
((int)) $TokenExcesses$_constructor_query_id(int $query_id) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;
